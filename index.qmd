---
title: "Torten üç∞ und Kerzen üïØÔ∏è"
lang: de
execute:
  echo: false
nocite: |
  @Holtz, @Siirtola2019, @Few2007, @Nussbaumer2011
---

## Torten üç∞ [Diagramme]{.smallHeader}

```{r}
# Libraries
library(ggplot2)
library(tidyverse)
library(viridis)
library(patchwork)
library(ggbeeswarm)
library(grateful)
library(prismatic)
library(treemapify)

bene_colors <- c(
  "#47476b",
  "#cda715",
  "#318986",
  "#93003a",
  "#3081ad",
  "#6d3d3d",
  "#79779f",
  "#00c1bf",
  "#777586"
)
bene_palette <- scale_fill_manual(values = bene_colors, breaks = waiver())
bene_palette_shifted <- scale_fill_manual(values = bene_colors[-1], breaks = waiver())

patchwork_defaults <- plot_annotation(theme = theme(plot.background = element_rect(fill = "transparent", colour = NA)))

theme_set(theme_minimal() +
  theme(
    legend.position = "none",
    plot.title = element_blank(),
    panel.grid = element_blank(),
    axis.text = element_blank(),
    legend.margin = unit(0, "null"),
    panel.background = element_rect(fill = "transparent", colour = NA),
    plot.background = element_rect(fill = "transparent", colour = NA)
  ))

margin_spacer <- function(x) {
  left_length <- nchar(levels(factor(x)))[1]
  if (left_length > 8) {
    return((left_length - 8) * 3)
  } else {
    return(0)
  }
}
```

```{r}
#| warning: false

# Define the to_grey_scale function if it's not already defined
to_grey_scale <- function(hex) {
  temp <- col2rgb(hex) %>%
    t() %>%
    as.data.frame() %>%
    mutate(gs = 0.299 * red + 0.587 * green + 0.114 * blue)

  rgb(temp$gs, temp$gs, temp$gs, maxColorValue = 256)
}

data1 <- data.frame(name = letters[1:5], value = c(17, 18, 20, 22, 24))
data2 <- data.frame(name = letters[1:5], value = c(20, 18, 21, 20, 20))
data3 <- data.frame(name = letters[1:5], value = c(24, 23, 21, 19, 18))

plot_pie <- function(data) {
  ggplot(data, aes(x = "name", y = value, fill = name)) +
    geom_bar(width = 1, stat = "identity") +
    coord_polar("y", start = 0, direction = -1) +
    bene_palette_shifted +
    geom_text(aes(label = name), position = position_stack(vjust = 0.5), color = "white") +
    xlab("") +
    ylab("")
}

# Create an empty plot function with the same dimensions and structure as plot_pie
plot_pie_empty <- function(data) {
  # Using the same data structure as plot_pie but with transparent elements
  ggplot(data, aes(x = "name", y = value, fill = name)) +
    geom_bar(width = 1, stat = "identity", fill = "transparent", color = "transparent") +
    coord_polar("y", start = 0, direction = -1) +
    scale_fill_manual(values = rep("transparent", 5)) +
    geom_text(aes(label = name), position = position_stack(vjust = 0.5), color = "transparent") +
    xlab("") +
    ylab("") +
    theme(
      panel.background = element_rect(fill = "transparent", colour = NA),
      plot.background = element_rect(fill = "transparent", colour = NA),
      axis.text = element_blank(),
      axis.ticks = element_blank(),
      panel.grid = element_blank()
    )
}

# Modified pie chart with specific colors greyed out
plot_pie_partial_gray <- function(data, grey_positions) {
  colors_modified <- bene_colors[-1]
  colors_modified[grey_positions] <- sapply(colors_modified[grey_positions], to_grey_scale)
  
  ggplot(data, aes(x = "name", y = value, fill = name)) +
    geom_bar(width = 1, stat = "identity") +
    coord_polar("y", start = 0, direction = -1) +
    scale_fill_manual(values = colors_modified, breaks = waiver()) +
    geom_text(aes(label = name), position = position_stack(vjust = 0.5), color = "white") +
    xlab("") +
    ylab("")
}

a <- plot_pie(data1)
b <- plot_pie(data2)
c <- plot_pie(data3)
a + b + c + patchwork_defaults
```

::: {.notes}
- Fl√§chen sind schwer zu sch√§tzen und zu vergleichen
- Winkel sind noch schwerer zu sch√§tzen und zu vergleichen
- L√§nge ist am einfachsten zu sch√§tzen und zu vergleichen
:::

## Torten üç∞ [Diagramme]{.smallHeader}

```{r}
#| warning: false

a <- plot_pie_partial_gray(data1, c(3, 4, 5))
b <- plot_pie_partial_gray(data2, c(1:5))
c <- plot_pie_partial_gray(data3, c(1:5))
a + b + c + patchwork_defaults
```

## Torten üç∞ [Diagramme]{.smallHeader}

```{r}
#| warning: false

a <- plot_pie_partial_gray(data1, c(2, 4, 5))
b <- plot_pie_partial_gray(data2, c(1:5))
c <- plot_pie_partial_gray(data3, c(1:5))
a + b + c + patchwork_defaults
```

## Torten üç∞ [Diagramme]{.smallHeader}

```{r}
#| warning: false

a <- plot_pie_partial_gray(data1, c(1:5))
b <- plot_pie_partial_gray(data2, c(2, 4, 5))
c <- plot_pie_partial_gray(data3, c(1:5))
a + b + c + patchwork_defaults
```

## Torten üç∞ [Diagramme]{.smallHeader}

```{r}
#| warning: false 

a <- plot_pie_partial_gray(data1, c(1:5))
b <- plot_pie_partial_gray(data2, c(1:5))
c <- plot_pie_partial_gray(data3, c(2, 4, 5))
a + b + c + patchwork_defaults
```

## Torten üç∞ [Diagramme]{.smallHeader}

```{r}
#| warning: false 

a <- plot_pie(data1)
b <- plot_pie(data2)
c <- plot_pie(data3)
a + b + c + patchwork_defaults
```

## ~~Torten üç∞~~ Balken! [Diagramme]{.smallHeader}

```{r}
#| warning: false

# reuses plots of fig-pies

plot_bar <- function(data) {
  ggplot(data, aes(x = name, y = value, fill = name)) +
    geom_bar(stat = "identity", color = "black") +
    bene_palette_shifted +
    geom_text(aes(label = name), position = position_stack(reverse = TRUE), vjust = 1.5, color = "white") +
    ylim(0, 25) +
    xlab("") +
    ylab("")
}

# reuses pieplots from previous slides
a <- plot_pie(data1)
b <- plot_pie(data2)
c <- plot_pie(data3)

d <- plot_bar(data1)
e <- plot_bar(data2)
f <- plot_bar(data3)

layout <- "
ABC
ABC
DEF
DEF
DEF
DEF
DEF
"

a + b + c + d + e + f + plot_layout(design = layout) + patchwork_defaults
```

::: {.notes}
- Balken sind viel leichter zu sch√§tzen und zu vergleichen, nur eine Dimension
:::

## Balkendiagramme f√ºr Mittelwerte [@Weissgerber2015]

```{r}
#| label: fig-meansseparationbar
#| fig-cap: "Balkendiagramme f√ºr Mittelwerte"
#| warning: false

bene_palette_shifted <- scale_fill_manual(values = bene_colors[-1], breaks = waiver())

# group1 is sampled from a normal distribution with mean = 1 and sd = 1.
# group2 is sampled from a lognormal distribution with mean = 1 and sd = 1.
set.seed(2363)
group1 <- rnorm(n = 250, mean = 1, sd = 1)
group2 <- rlnorm(
  n = 250,
  meanlog = log(1^2 / sqrt(1^2 + 1^2)),
  sdlog = sqrt(log(1 + (1^2 / 1^2)))
)

groups_long <- cbind(
  group1,
  group2
) %>%
  as.data.frame() %>%
  gather("group", "response", 1:2)

bar <- groups_long %>%
  ggplot(aes(x = group, y = response)) +
  geom_bar(stat = "summary", fun = mean, aes(fill = group), width = 0.5, colour = "black") +
  stat_summary(
    geom = "errorbar", fun.data = "mean_se",
    width = 0.1, size = 1
  ) +
  scale_y_continuous(expand = expand_scale(mult = c(0, 0.1))) +
  bene_palette_shifted +
  theme_classic() +
  theme(
    text = element_text(color = "black"),
    axis.text = element_text(color = "black"),
    legend.position = "none",
    plot.title = element_text(size = 10),
    plot.caption = element_text(hjust = 0),
    axis.line.x = element_line(color = "black"),
    axis.line.y = element_line(color = "black"),
    panel.grid.major.y = element_line(color = "grey"),
    axis.title.x = element_blank()
  ) +
  labs(
    x = "Group",
    y = "Response"
  ) +
  ggtitle(
    paste0(
      "group1: mean = ", signif(mean(group1), 2),
      "; sd = ", signif(sd(group1), 2), "\n",
      "group2: mean = ", signif(mean(group2), 2),
      "; sd = ", signif(sd(group2), 2)
    )
  )

bar
```

## Balkendiagrammen f√ºr Mittelwerte

```{r}
#| label: fig-meansseparationall
#| fig-cap: "Alternativen: Boxplots und Beeswarm-Plots"
#| warning: false

box <- groups_long %>%
  ggplot(aes(x = group, y = response)) +
  geom_boxplot(aes(fill = group), width = 0.5) +
  labs(
    y = "Response"
  ) +
  bene_palette_shifted +
  theme_classic() +
  theme(
    text = element_text(color = "black"),
    axis.text = element_text(color = "black"),
    legend.position = "none",
    plot.title = element_text(size = 10),
    plot.caption = element_text(hjust = 0),
    axis.line.x = element_line(color = "black"),
    axis.line.y = element_line(color = "black"),
    panel.grid.major.y = element_line(color = "grey"),
    axis.title.x = element_blank()
  ) +
  ggtitle(
    paste0(
      "group1: median = ", signif(median(group1), 2),
      "; IQR = ", signif(IQR(group1), 2), "\n",
      "group2: median = ", signif(median(group2), 2),
      "; IQR = ", signif(IQR(group2), 2)
    )
  )

beeswarm <- groups_long %>%
  ggplot(aes(x = group, y = response)) +
  geom_beeswarm(alpha = 0.8, size = 2, shape = 21, color = "black", aes(fill = group), cex = 1.7, method = "compactswarm") +
  bene_palette_shifted +
  labs(
    x = "Group",
    y = "Response"
  ) +
  theme_classic() +
  theme(
    text = element_text(color = "black"),
    axis.text = element_text(color = "black"),
    legend.position = "none",
    plot.title = element_text(size = 10),
    plot.caption = element_text(hjust = 0),
    axis.line.x = element_line(color = "black"),
    axis.line.y = element_line(color = "black"),
    panel.grid.major.y = element_line(color = "grey"),
    axis.title.x = element_blank()
  ) +
  ggtitle(
    paste0(
      "group1: median = ", signif(median(group1), 2),
      "; IQR = ", signif(IQR(group1), 2), "\n",
      "group2: median = ", signif(median(group2), 2),
      "; IQR = ", signif(IQR(group2), 2)
    )
  )

bar + box + beeswarm + patchwork_defaults
```

::: {.notes}
- Box Plots show the median and the interquartile range (IQR) of the data
  - Whiskers are min and max OR 1.5 * IQR
  - Points are outliers
:::

## Violinplots f√ºr kleine Stichproben üéª

```{r}
#| warning: false

# Generate three sets of data from a normal distribution with mean = 1 and sd = 1.

set.seed(666)

data_set <- replicate(rnorm(5, mean = 1, sd = 1), n = 3, simplify = T) %>%
  as.data.frame() %>%
  gather("sample", "Response", 1:3) %>%
  mutate(Group = str_replace(sample, "V", "group"))

violin_eg <- data_set %>%
  ggplot(aes(x = Group, y = Response)) +
  geom_violin(aes(fill = Group), trim = FALSE) +
  stat_summary(geom = "point", fun = median) +
  bene_palette_shifted +
  theme_classic() +
  theme(
    text = element_text(color = "black"),
    axis.text = element_text(color = "black"),
    panel.grid.major.y = element_line(color = "grey"),
    legend.position = "none",
    axis.title.x = element_blank()
  )

violin_eg + plot_spacer() + plot_spacer()
```

## Violinplots f√ºr kleine Stichproben üéª

```{r}
#| warning: false

box_eg <- data_set %>%
  ggplot(aes(x = Group, y = Response)) +
  geom_boxplot(aes(fill = Group)) +
  bene_palette_shifted +
  theme_classic() +
  theme(
    text = element_text(color = "black"),
    axis.text = element_text(color = "black"),
    panel.grid.major.y = element_line(color = "grey"),
    legend.position = "none",
    axis.title.x = element_blank()
  )

violin_eg + box_eg + plot_spacer()
```

## ~~Violinplots f√ºr kleine Stichproben üéª~~ Jitterplots!

```{r}
#| warning: false

jitter_eg <- data_set %>%
  ggplot(aes(x = Group, y = Response)) +
  geom_point(aes(fill = Group),
    shape = 21, size = 3, color = "black",
    position = position_jitter(seed = 1, width = 0.2)
  ) +
  bene_palette_shifted +
  theme_classic() +
  theme(
    text = element_text(color = "black"),
    axis.text = element_text(color = "black"),
    panel.grid.major.y = element_line(color = "grey"),
    legend.position = "none",
    axis.title.x = element_blank()
  )


violin_eg + box_eg + jitter_eg
```

## Balkendiagramm-W√§ldern

```{r}
#| label: fig-barmeadows
#| fig-cap: "Balkendiagramm f√ºr multifaktorielle Daten [@Sheesley]"
#| warning: false
sheesleyData <- read.csv("sheesley.csv") %>%
  mutate(
    Weld = as.factor(Weld),
    Shift = as.factor(Shift),
    Machine = as.factor(Machine),
    Plant = as.factor(Plant),
    Replication = as.factor(Replication)
  )
sheesleyData$WeldShiftMachinePlant <- as.factor(paste(sheesleyData$Weld, sheesleyData$Shift, sheesleyData$Machine, sheesleyData$Plant, sep = "-"))
sheesleyData$ShiftPlant <- as.factor(paste(sheesleyData$Shift, sheesleyData$Plant, sep = "-"))

barmeadows <- sheesleyData %>%
  ggplot(aes(x = WeldShiftMachinePlant, y = Y)) +
  geom_bar(stat = "summary", fun = mean, aes(fill = Shift), width = 0.5, colour = "black") +
  stat_summary(
    geom = "errorbar", fun.data = "mean_se",
    width = 0.1, size = 1
  ) +
  labs(
    y = "Average number of welded lead wires missed per hour",
    x = "Weld-Shift-Machine-Plant"
  ) +
  scale_y_continuous(expand = expand_scale(mult = c(0, 0.1))) +
  bene_palette_shifted +
  theme_classic() +
  theme(
    text = element_text(color = "black"),
    axis.text = element_text(color = "black"),
    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)
  )

barmeadows
```

## Balkendiagramm-W√§ldern

```{r}
#| label: fig-barmeadowsfixed
#| fig-cap: "Multifaktorielle Daten als aufgeteilte Boxplots"
#| warning: false

Machine.labs <- c("Machine 1", "Machine 2")
names(Machine.labs) <- c("1", "2")
Plant.labs <- c("Plant 1", "Plant 2")
names(Plant.labs) <- c("1", "2")

dotsformultifactor <- sheesleyData %>%
  ggplot(aes(x = Shift, y = Y)) +
  facet_wrap(Machine ~ Plant, scales = "free_x", strip.position = "bottom", labeller = labeller(Machine = Machine.labs, Plant = Plant.labs)) +
  geom_boxplot(aes(fill = Shift)) +
  bene_palette_shifted +
  labs(
    y = "Average number of welded lead wires missed per hour",
  ) +
  theme_classic() +
  theme(
    text = element_text(color = "black"),
    axis.text = element_text(color = "black"),
    strip.text.x = element_text(color = "black"),
    strip.background = element_blank(),
    strip.placement = "outside",
  )

dotsformultifactor
```

## Rot/Gr√ºn- oder Regenbogen-Farbskalen üåà

```{r}
#| warning: true

abc_1 <- expand.grid(
  a = c(1:10),
  b = c(1:10)
) %>%
  mutate(c = a + b)

to_grey_scale <- function(hex) {
  temp <- col2rgb(hex) %>%
    t() %>%
    as.data.frame() %>%
    mutate(gs = 0.299 * red + 0.587 * green + 0.114 * blue)

  rgb(temp$gs, temp$gs, temp$gs, maxColorValue = 256)
}

grid_theme <- theme(
  text = element_text(color = "black"),
  # legend.position = "none",
  legend.title = element_blank(),
  legend.text = element_blank(),
  axis.title = element_blank(),
  axis.text = element_text(color = "black"),
)

# Red/green

Red_green <- abc_1 %>%
  ggplot(aes(x = a, y = b)) +
  geom_tile(aes(fill = c)) +
  scale_fill_gradient2(low = "red", mid = "white", high = "green", midpoint = 11) +
  theme_classic() +
  grid_theme +
  coord_fixed()

## Grey scale

Red_green_gs <- abc_1 %>%
  ggplot(aes(x = a, y = b)) +
  geom_tile(aes(fill = c)) +
  scale_fill_gradient2(
    low = to_grey_scale("red"),
    mid = "white",
    high = to_grey_scale("green"), midpoint = 11
  ) +
  theme_classic() +
  grid_theme +
  coord_fixed()

## Red/green colorblind

Red_green_deu <- abc_1 %>%
  ggplot(aes(x = a, y = b)) +
  geom_tile(aes(fill = c)) +
  scale_fill_gradient2(
    low = clr_deutan("red"),
    mid = clr_deutan("white"),
    high = clr_deutan("green"), midpoint = 11
  ) +
  theme_classic() +
  grid_theme +
  coord_fixed()

# Rainbow

Rainbow1 <- abc_1 %>%
  ggplot(aes(x = a, y = b)) +
  geom_tile(aes(fill = c)) +
  scale_fill_gradientn(colors = rainbow(20)) +
  theme_classic() +
  grid_theme +
  coord_fixed()

## grey scale

Rainbow_gs <- abc_1 %>%
  ggplot(aes(x = a, y = b)) +
  geom_tile(aes(fill = c)) +
  scale_fill_gradientn(colors = rainbow(20) %>% to_grey_scale()) +
  theme_classic() +
  grid_theme +
  coord_fixed()

## Red/green color blind

Rainbow_deu <- abc_1 %>%
  ggplot(aes(x = a, y = b)) +
  geom_tile(aes(fill = c)) +
  scale_fill_gradientn(colors = rainbow(20) %>% clr_deutan()) +
  theme_classic() +
  grid_theme +
  coord_fixed()

# Viridis

viridis_optionD <- abc_1 %>%
  ggplot(aes(x = a, y = b)) +
  geom_tile(aes(fill = c)) +
  scale_fill_gradientn(colors = viridis(100)) +
  theme_classic() +
  grid_theme +
  coord_fixed()

## Grey scale

viridis_gs <- abc_1 %>%
  ggplot(aes(x = a, y = b)) +
  geom_tile(aes(fill = c)) +
  scale_fill_gradientn(colors = to_grey_scale(viridis(100))) +
  theme_classic() +
  grid_theme +
  coord_fixed()

## Red/green color blind

viridis_deu <- abc_1 %>%
  ggplot(aes(x = a, y = b)) +
  geom_tile(aes(fill = c)) +
  scale_fill_gradientn(colors = clr_deutan(viridis(100))) +
  theme_classic() +
  grid_theme +
  coord_fixed()

## empty

empty <- abc_1 %>%
  ggplot(aes(x = a, y = b)) +
  geom_tile(aes(fill = c), alpha = 0) +
  scale_fill_gradientn(colors = c("#FFFFFF00")) +
  theme_classic() +
  grid_theme +
  coord_fixed() +
  theme(
    axis.text = element_text(color = "transparent"),
    axis.title = element_text(color = "transparent"),
    axis.ticks = element_line(color = "transparent"),
    axis.line = element_line(color = "transparent")
  )

wrap_plots(Red_green, empty, empty,
  Rainbow1, empty, empty,
  empty, empty, empty,
  nrow = 3,
  ncol = 3
)
```
::: {.notes}
- Red‚Äìgreen colorblindness: 8% males, 0.5% females (Northern European descent)
:::

## Rot/Gr√ºn- oder Regenbogen-Farbskalen üåà

```{r}
#| warning: true

wrap_plots(Red_green, Red_green_gs, empty,
  Rainbow1, Rainbow_gs, empty,
  empty, empty, empty,
  nrow = 3,
  ncol = 3
)
```

## Rot/Gr√ºn- oder Regenbogen-Farbskalen üåà

```{r}
#| warning: true

wrap_plots(Red_green, Red_green_gs, Red_green_deu,
  Rainbow1, Rainbow_gs, Rainbow_deu,
  empty, empty, empty,
  nrow = 3,
  ncol = 3
)
```

## ~~Rot/Gr√ºn- oder Regenbogen-Farbskalen üåà~~ Viridis!

```{r}
#| warning: true

wrap_plots(Red_green, Red_green_gs, Red_green_deu,
  Rainbow1, Rainbow_gs, Rainbow_deu,
  viridis_optionD, viridis_gs, viridis_deu,
  nrow = 3,
  ncol = 3
)
```

## [Nette Kolleginnen hindern ihre Kolleginnen an der Erstellung von ]{.smallHeader}[Heatmaps ohne eine Adjustierung f√ºr Ausrei√üer]{.notThatSmallHeader}

```{r}
#| label: fig-heatsandoutliers
#| fig-cap: "Heatmaps mit Ausrei√üern"
#| warning: false
set.seed(2363)

group1 <- rnorm(mean = 1, sd = 0.2, n = 8)
group2 <- rnorm(mean = 0, sd = 0.2, n = 12)
group3 <- rnorm(mean = 0, sd = 0.2, n = 8)
group4 <- rnorm(mean = 1, sd = 0.2, n = 10)
group5 <- rnorm(mean = 10, sd = 1, n = 2)

toydata <- data.frame(
  observation1 = c(group1, group2),
  observation2 = c(group3, group4, group5)
) %>%
  mutate(feature = 1:20) %>%
  pivot_longer(cols = !feature, names_to = "observation", values_to = "value") %>%
  mutate(observation2 = str_remove(observation, "observation"))

p1 <- toydata %>%
  mutate(observation2 = fct_rev(observation2)) %>%
  ggplot(aes(x = observation2, y = feature)) +
  geom_tile(aes(fill = value)) +
  scale_fill_gradientn(colors = viridis(n = 10)) +
  labs(
    x = "Observations",
    y = "Features"
  ) +
  theme_classic() +
  coord_flip()

p2 <- toydata %>%
  mutate(observation2 = fct_rev(observation2)) %>%
  mutate(rank = rank(value, ties.method = "first")) %>%
  ggplot(aes(x = value, y = rank)) +
  geom_point(
    shape = 21, color = "black",
    aes(fill = value), size = 3
  ) +
  scale_fill_gradientn(colors = viridis(n = 10)) +
  theme_classic() +
  theme(
    legend.position = "none",
  )

p3 <- toydata %>%
  mutate(observation2 = fct_rev(observation2)) %>%
  mutate(rank = rank(value, ties.method = "first")) %>%
  mutate(value2 = case_when(
    value >= 2 ~ 2,
    T ~ value
  )) %>%
  ggplot(aes(x = value, y = rank)) +
  geom_point(
    shape = 21, color = "black",
    aes(fill = value2), size = 3
  ) +
  scale_fill_gradientn(
    colors = viridis(n = 10),
    breaks = c(0, 1, 2),
    labels = c("0", "1", ">2")
  ) +
  labs(fill = "value") +
  theme_classic() +
  theme(
    legend.position = "none",
  )

p4 <- toydata %>%
  mutate(observation2 = fct_rev(observation2)) %>%
  mutate(value2 = case_when(
    value >= 1.5 ~ 2,
    T ~ value
  )) %>%
  ggplot(aes(x = observation2, y = feature)) +
  geom_tile(aes(fill = value2)) +
  scale_fill_gradientn(
    colors = viridis(n = 10),
    breaks = c(0, 1, 2),
    labels = c("0", "1", ">2")
  ) +
  labs(
    x = "Observations",
    y = "Features",
    fill = "value"
  ) +
  theme_classic() +
  coord_flip()

wrap_plots(p1, p2, p4, p3,
  nrow = 2, ncol = 2,
  widths = c(1, 0.7)
)
```

::: {.notes}
95% quantile = 1.723745
:::

## Bonus: Alternativen f√ºr Balkendiagramme

```{r}
#| label: fig-barplotalternatives
#| fig-cap: "Alternativen f√ºr Balkendiagramme: Lollipop-Plots und Treemaps"
#| warning: false

# total = 31983
armsData <- read.csv("arms_supplier_2022.csv") %>%
  mutate(Supplier = as.factor(Supplier)) %>%
  mutate(Percentage = TIV_2022 / 31983)

lollipops <- armsData[1:20, ] %>%
  ggplot(aes(x = reorder(Supplier, Percentage), y = Percentage)) +
  geom_segment(aes(xend = Supplier, yend = 0), color = "darkgrey") +
  scale_y_continuous(labels = scales::percent, expand = expand_scale(mult = c(0, 0.1))) +
  geom_point(size = 4, color = bene_colors[1]) +
  bene_palette_shifted +
  theme_classic() +
  theme(
    panel.grid.major.x = element_line(color = "lightgrey"),
    panel.grid.minor.x = element_line(color = "lightgrey"),
    axis.title.y = element_blank()
  ) +
  labs(x = "Supplier", y = "Percentage of arms supplied in 2022") +
  coord_flip()

treemap <- armsData[1:20, ] %>%
  ggplot(aes(area = Percentage, fill = Supplier, label = Supplier)) +
  geom_treemap(start = "topleft") +
  geom_treemap_text(color = "white", place = "centre", reflow = TRUE, start = "topleft") +
  scale_fill_manual(values = rep(bene_colors, 20))

lollipops + treemap
```

## {.center}

**Pr√§sentation basierend auf**

*Friends Don't Let Friends Make Bad Graphs* [@Li2023]

## Eingesetzte R Pakete {.smaller}

```{r}
cite_packages(output = "table", out.dir = ".") %>%
  mutate(Package = paste(Package, " [", Citation, "]", sep = "")) %>%
  select(-Citation) %>%
  knitr::kable(col.names = c("Package", "Version"), align = "lr")
```

## Quellen {.smaller visibility="uncounted" .unnumbered .unlisted}

::: {#refs}
:::
